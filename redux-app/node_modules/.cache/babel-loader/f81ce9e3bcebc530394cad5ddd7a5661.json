{"ast":null,"code":"import * as types from \"../constants/ActionTypes\";\nimport axios from \"axios\";\nimport * as jwt from \"jsonwebtoken\";\nimport bcrypt from \"bcryptjs\";\nexport const setCurrentUser = user => {\n  return {\n    type: types.SET_CURRENT_USER,\n    user\n  };\n};\nexport const registerRequest = user => {\n  console.log(data);\n  return dispatch => {\n    return () => {\n      const hassPassword = bcrypt.hashSync(user.password, \"my salt\");\n      const token = jwt.sign({\n        username: user.username,\n        password: hassPassword\n      }, \"SECRET_TOKEN\");\n      const data = {\n        username: user.username,\n        password: hassPassword,\n        token: token\n      };\n      axios.post(\"https://60b0f8b91f26610017fff943.mockapi.io/api/v1/users\", data).then(response => {\n        dispatch(register(response.data));\n      }).catch(err => {\n        console.log(err);\n      });\n    };\n  };\n};\nexport const register = user => {\n  return {\n    type: types.REGISTER,\n    user\n  };\n};\nexport const login = data => {\n  return dispatch => {\n    return axios.get(\"https://60b0f8b91f26610017fff943.mockapi.io/api/v1/users\").then(response => {\n      for (const user of response.data) {\n        if (data.username === user.username) {\n          bcrypt.compare(data.password, user.password).then(valid => {\n            if (valid) {\n              const token = response.data.token;\n              window.localStorage.setItem(\"jwtToken\", token);\n              dispatch(setCurrentUser(jwt.decode(token)));\n            }\n          });\n        }\n      }\n    });\n  };\n};","map":{"version":3,"sources":["D:/react/redux-app/src/actions/index.js"],"names":["types","axios","jwt","bcrypt","setCurrentUser","user","type","SET_CURRENT_USER","registerRequest","console","log","data","dispatch","hassPassword","hashSync","password","token","sign","username","post","then","response","register","catch","err","REGISTER","login","get","compare","valid","window","localStorage","setItem","decode"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,0BAAvB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAO,KAAKC,GAAZ,MAAqB,cAArB;AACA,OAAOC,MAAP,MAAmB,UAAnB;AAEA,OAAO,MAAMC,cAAc,GAAIC,IAAD,IAAU;AACtC,SAAO;AACLC,IAAAA,IAAI,EAAEN,KAAK,CAACO,gBADP;AAELF,IAAAA;AAFK,GAAP;AAID,CALM;AAOP,OAAO,MAAMG,eAAe,GAAIH,IAAD,IAAU;AACvCI,EAAAA,OAAO,CAACC,GAAR,CAAYC,IAAZ;AACA,SAAQC,QAAD,IAAc;AACnB,WAAO,MAAM;AACX,YAAMC,YAAY,GAAGV,MAAM,CAACW,QAAP,CAAgBT,IAAI,CAACU,QAArB,EAA+B,SAA/B,CAArB;AACA,YAAMC,KAAK,GAAGd,GAAG,CAACe,IAAJ,CACZ;AACEC,QAAAA,QAAQ,EAAEb,IAAI,CAACa,QADjB;AAEEH,QAAAA,QAAQ,EAAEF;AAFZ,OADY,EAKZ,cALY,CAAd;AAOA,YAAMF,IAAI,GAAG;AACXO,QAAAA,QAAQ,EAAEb,IAAI,CAACa,QADJ;AAEXH,QAAAA,QAAQ,EAAEF,YAFC;AAGXG,QAAAA,KAAK,EAAEA;AAHI,OAAb;AAMAf,MAAAA,KAAK,CACFkB,IADH,CACQ,0DADR,EACoER,IADpE,EAEGS,IAFH,CAESC,QAAD,IAAc;AAClBT,QAAAA,QAAQ,CAACU,QAAQ,CAACD,QAAQ,CAACV,IAAV,CAAT,CAAR;AACD,OAJH,EAKGY,KALH,CAKUC,GAAD,IAAS;AACdf,QAAAA,OAAO,CAACC,GAAR,CAAYc,GAAZ;AACD,OAPH;AAQD,KAvBD;AAwBD,GAzBD;AA0BD,CA5BM;AA8BP,OAAO,MAAMF,QAAQ,GAAIjB,IAAD,IAAU;AAChC,SAAO;AACLC,IAAAA,IAAI,EAAEN,KAAK,CAACyB,QADP;AAELpB,IAAAA;AAFK,GAAP;AAID,CALM;AAOP,OAAO,MAAMqB,KAAK,GAAIf,IAAD,IAAU;AAC7B,SAAQC,QAAD,IAAc;AACnB,WAAOX,KAAK,CACT0B,GADI,CACA,0DADA,EAEJP,IAFI,CAEEC,QAAD,IAAc;AAClB,WAAK,MAAMhB,IAAX,IAAmBgB,QAAQ,CAACV,IAA5B,EAAkC;AAChC,YAAIA,IAAI,CAACO,QAAL,KAAkBb,IAAI,CAACa,QAA3B,EAAqC;AACnCf,UAAAA,MAAM,CAACyB,OAAP,CAAejB,IAAI,CAACI,QAApB,EAA8BV,IAAI,CAACU,QAAnC,EAA6CK,IAA7C,CAAmDS,KAAD,IAAW;AAC3D,gBAAIA,KAAJ,EAAW;AACT,oBAAMb,KAAK,GAAGK,QAAQ,CAACV,IAAT,CAAcK,KAA5B;AACAc,cAAAA,MAAM,CAACC,YAAP,CAAoBC,OAApB,CAA4B,UAA5B,EAAwChB,KAAxC;AACAJ,cAAAA,QAAQ,CAACR,cAAc,CAACF,GAAG,CAAC+B,MAAJ,CAAWjB,KAAX,CAAD,CAAf,CAAR;AACD;AACF,WAND;AAOD;AACF;AACF,KAdI,CAAP;AAeD,GAhBD;AAiBD,CAlBM","sourcesContent":["import * as types from \"../constants/ActionTypes\";\r\nimport axios from \"axios\";\r\nimport * as jwt from \"jsonwebtoken\";\r\nimport bcrypt from \"bcryptjs\";\r\n\r\nexport const setCurrentUser = (user) => {\r\n  return {\r\n    type: types.SET_CURRENT_USER,\r\n    user,\r\n  };\r\n};\r\n\r\nexport const registerRequest = (user) => {\r\n  console.log(data);\r\n  return (dispatch) => {\r\n    return () => {\r\n      const hassPassword = bcrypt.hashSync(user.password, \"my salt\");\r\n      const token = jwt.sign(\r\n        {\r\n          username: user.username,\r\n          password: hassPassword,\r\n        },\r\n        \"SECRET_TOKEN\"\r\n      );\r\n      const data = {\r\n        username: user.username,\r\n        password: hassPassword,\r\n        token: token,\r\n      };\r\n      \r\n      axios\r\n        .post(\"https://60b0f8b91f26610017fff943.mockapi.io/api/v1/users\", data)\r\n        .then((response) => {\r\n          dispatch(register(response.data));\r\n        })\r\n        .catch((err) => {\r\n          console.log(err);\r\n        });\r\n    };\r\n  };\r\n};\r\n\r\nexport const register = (user) => {\r\n  return {\r\n    type: types.REGISTER,\r\n    user,\r\n  };\r\n};\r\n\r\nexport const login = (data) => {\r\n  return (dispatch) => {\r\n    return axios\r\n      .get(\"https://60b0f8b91f26610017fff943.mockapi.io/api/v1/users\")\r\n      .then((response) => {\r\n        for (const user of response.data) {\r\n          if (data.username === user.username) {\r\n            bcrypt.compare(data.password, user.password).then((valid) => {\r\n              if (valid) {\r\n                const token = response.data.token;\r\n                window.localStorage.setItem(\"jwtToken\", token);\r\n                dispatch(setCurrentUser(jwt.decode(token)));\r\n              }\r\n            });\r\n          }\r\n        }\r\n      });\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}