{"ast":null,"code":"import * as types from \"../constants/ActionTypes\";\nimport axios from \"axios\";\nimport * as jwt from \"jsonwebtoken\";\nimport bcrypt from \"bcryptjs\";\nexport const setCurrentUser = user => {\n  return {\n    type: types.SET_CURRENT_USER,\n    user\n  };\n};\nexport const registerRequest = user => {\n  return dispatch => {\n    const salt = bcrypt.genSaltSync(10);\n    const hassPassword = bcrypt.hashSync(user.password, salt);\n    const token = jwt.sign({\n      username: user.username,\n      password: hassPassword\n    }, \"SECRET_TOKEN\");\n    const data = {\n      username: user.username,\n      password: hassPassword,\n      token: token\n    };\n    axios.post(\"https://60b0f8b91f26610017fff943.mockapi.io/api/v1/users\", data).then(response => {\n      dispatch(register(response.data));\n    }).catch(err => {\n      console.log(err);\n    });\n  };\n};\nexport const register = user => {\n  return {\n    type: types.REGISTER,\n    user\n  };\n};\nexport const login = data => {\n  return dispatch => {\n    return axios.get(\"https://60b0f8b91f26610017fff943.mockapi.io/api/v1/users\").then(response => {\n      for (const user of response.data) {\n        if (data.username === user.username) {\n          bcrypt.compare(data.password, user.password).then(valid => {\n            if (valid) {\n              const token = response.data.token;\n              window.localStorage.setItem(\"jwtToken\", token);\n              dispatch(setCurrentUser(jwt.decode(token)));\n            }\n          });\n        }\n      }\n    });\n  };\n};","map":{"version":3,"sources":["D:/react/redux-app/src/actions/index.js"],"names":["types","axios","jwt","bcrypt","setCurrentUser","user","type","SET_CURRENT_USER","registerRequest","dispatch","salt","genSaltSync","hassPassword","hashSync","password","token","sign","username","data","post","then","response","register","catch","err","console","log","REGISTER","login","get","compare","valid","window","localStorage","setItem","decode"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,0BAAvB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAO,KAAKC,GAAZ,MAAqB,cAArB;AACA,OAAOC,MAAP,MAAmB,UAAnB;AAEA,OAAO,MAAMC,cAAc,GAAIC,IAAD,IAAU;AACtC,SAAO;AACLC,IAAAA,IAAI,EAAEN,KAAK,CAACO,gBADP;AAELF,IAAAA;AAFK,GAAP;AAID,CALM;AAOP,OAAO,MAAMG,eAAe,GAAIH,IAAD,IAAU;AACvC,SAAQI,QAAD,IAAc;AACnB,UAAMC,IAAI,GAAGP,MAAM,CAACQ,WAAP,CAAmB,EAAnB,CAAb;AACA,UAAMC,YAAY,GAAGT,MAAM,CAACU,QAAP,CAAgBR,IAAI,CAACS,QAArB,EAA+BJ,IAA/B,CAArB;AACA,UAAMK,KAAK,GAAGb,GAAG,CAACc,IAAJ,CACZ;AACEC,MAAAA,QAAQ,EAAEZ,IAAI,CAACY,QADjB;AAEEH,MAAAA,QAAQ,EAAEF;AAFZ,KADY,EAKZ,cALY,CAAd;AAOA,UAAMM,IAAI,GAAG;AACXD,MAAAA,QAAQ,EAAEZ,IAAI,CAACY,QADJ;AAEXH,MAAAA,QAAQ,EAAEF,YAFC;AAGXG,MAAAA,KAAK,EAAEA;AAHI,KAAb;AAMAd,IAAAA,KAAK,CACFkB,IADH,CACQ,0DADR,EACoED,IADpE,EAEGE,IAFH,CAESC,QAAD,IAAc;AAClBZ,MAAAA,QAAQ,CAACa,QAAQ,CAACD,QAAQ,CAACH,IAAV,CAAT,CAAR;AACD,KAJH,EAKGK,KALH,CAKUC,GAAD,IAAS;AACdC,MAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACD,KAPH;AAQD,GAxBD;AAyBD,CA1BM;AA4BP,OAAO,MAAMF,QAAQ,GAAIjB,IAAD,IAAU;AAChC,SAAO;AACLC,IAAAA,IAAI,EAAEN,KAAK,CAAC2B,QADP;AAELtB,IAAAA;AAFK,GAAP;AAID,CALM;AAOP,OAAO,MAAMuB,KAAK,GAAIV,IAAD,IAAU;AAC7B,SAAQT,QAAD,IAAc;AACnB,WAAOR,KAAK,CACT4B,GADI,CACA,0DADA,EAEJT,IAFI,CAEEC,QAAD,IAAc;AAClB,WAAK,MAAMhB,IAAX,IAAmBgB,QAAQ,CAACH,IAA5B,EAAkC;AAChC,YAAIA,IAAI,CAACD,QAAL,KAAkBZ,IAAI,CAACY,QAA3B,EAAqC;AACnCd,UAAAA,MAAM,CAAC2B,OAAP,CAAeZ,IAAI,CAACJ,QAApB,EAA8BT,IAAI,CAACS,QAAnC,EAA6CM,IAA7C,CAAmDW,KAAD,IAAW;AAC3D,gBAAIA,KAAJ,EAAW;AACT,oBAAMhB,KAAK,GAAGM,QAAQ,CAACH,IAAT,CAAcH,KAA5B;AACAiB,cAAAA,MAAM,CAACC,YAAP,CAAoBC,OAApB,CAA4B,UAA5B,EAAwCnB,KAAxC;AACAN,cAAAA,QAAQ,CAACL,cAAc,CAACF,GAAG,CAACiC,MAAJ,CAAWpB,KAAX,CAAD,CAAf,CAAR;AACD;AACF,WAND;AAOD;AACF;AACF,KAdI,CAAP;AAeD,GAhBD;AAiBD,CAlBM","sourcesContent":["import * as types from \"../constants/ActionTypes\";\r\nimport axios from \"axios\";\r\nimport * as jwt from \"jsonwebtoken\";\r\nimport bcrypt from \"bcryptjs\";\r\n\r\nexport const setCurrentUser = (user) => {\r\n  return {\r\n    type: types.SET_CURRENT_USER,\r\n    user,\r\n  };\r\n};\r\n\r\nexport const registerRequest = (user) => {\r\n  return (dispatch) => {\r\n    const salt = bcrypt.genSaltSync(10);\r\n    const hassPassword = bcrypt.hashSync(user.password, salt);\r\n    const token = jwt.sign(\r\n      {\r\n        username: user.username,\r\n        password: hassPassword,\r\n      },\r\n      \"SECRET_TOKEN\"\r\n    );\r\n    const data = {\r\n      username: user.username,\r\n      password: hassPassword,\r\n      token: token,\r\n    };\r\n\r\n    axios\r\n      .post(\"https://60b0f8b91f26610017fff943.mockapi.io/api/v1/users\", data)\r\n      .then((response) => {\r\n        dispatch(register(response.data));\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n      });\r\n  };\r\n};\r\n\r\nexport const register = (user) => {\r\n  return {\r\n    type: types.REGISTER,\r\n    user,\r\n  };\r\n};\r\n\r\nexport const login = (data) => {\r\n  return (dispatch) => {\r\n    return axios\r\n      .get(\"https://60b0f8b91f26610017fff943.mockapi.io/api/v1/users\")\r\n      .then((response) => {\r\n        for (const user of response.data) {\r\n          if (data.username === user.username) {\r\n            bcrypt.compare(data.password, user.password).then((valid) => {\r\n              if (valid) {\r\n                const token = response.data.token;\r\n                window.localStorage.setItem(\"jwtToken\", token);\r\n                dispatch(setCurrentUser(jwt.decode(token)));\r\n              }\r\n            });\r\n          }\r\n        }\r\n      });\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}