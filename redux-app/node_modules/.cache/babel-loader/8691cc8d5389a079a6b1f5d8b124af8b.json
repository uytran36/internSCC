{"ast":null,"code":"import * as types from \"../constants/ActionTypes\";\nimport axios from \"axios\";\nimport * as jwt from \"jsonwebtoken\"; //import bcrypt from \"bcrypt\";\n\nexport const setCurrentUser = user => {\n  return {\n    type: types.SET_CURRENT_USER,\n    user\n  };\n};\nexport const registerRequest = user => {\n  return dispatch => {\n    return () => {\n      const token = jwt.sign({\n        username: user.username,\n        password: user.password\n      }, \"SECRET_TOKEN\");\n      const data = {\n        username: user.username,\n        password: user.password,\n        token: token\n      };\n      axios.post(\"https://60b0f8b91f26610017fff943.mockapi.io/api/v1/users\", data).then(response => {\n        dispatch(register(response.data));\n      }).catch(err => {\n        console.log(err);\n      });\n    };\n  };\n};\nexport const register = user => {\n  return {\n    type: types.REGISTER,\n    user\n  };\n};\nexport const login = data => {\n  return dispatch => {\n    return axios.get(\"https://60b0f8b91f26610017fff943.mockapi.io/api/v1/users\").then(response => {\n      for (const user of response.data) {\n        if (data.username === user.username) {\n          console.log(user); // bcrypt.compare(data.password, user.password).then((valid) => {\n          //   if (valid) {\n          //     const token = response.data.token;\n          //     window.localStorage.setItem(\"jwtToken\", token);\n          //     dispatch(setCurrentUser(jwt.decode(token)));\n          //   }\n          // });\n        }\n      }\n    });\n  };\n};","map":{"version":3,"sources":["D:/react/redux-app/src/actions/index.js"],"names":["types","axios","jwt","setCurrentUser","user","type","SET_CURRENT_USER","registerRequest","dispatch","token","sign","username","password","data","post","then","response","register","catch","err","console","log","REGISTER","login","get"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,0BAAvB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAO,KAAKC,GAAZ,MAAqB,cAArB,C,CACA;;AAEA,OAAO,MAAMC,cAAc,GAAIC,IAAD,IAAU;AACtC,SAAO;AACLC,IAAAA,IAAI,EAAEL,KAAK,CAACM,gBADP;AAELF,IAAAA;AAFK,GAAP;AAID,CALM;AAOP,OAAO,MAAMG,eAAe,GAAIH,IAAD,IAAU;AACvC,SAAQI,QAAD,IAAc;AACnB,WAAO,MAAM;AACX,YAAMC,KAAK,GAAGP,GAAG,CAACQ,IAAJ,CACZ;AACEC,QAAAA,QAAQ,EAAEP,IAAI,CAACO,QADjB;AAEEC,QAAAA,QAAQ,EAAER,IAAI,CAACQ;AAFjB,OADY,EAKZ,cALY,CAAd;AAOA,YAAMC,IAAI,GAAG;AACXF,QAAAA,QAAQ,EAAEP,IAAI,CAACO,QADJ;AAEXC,QAAAA,QAAQ,EAAER,IAAI,CAACQ,QAFJ;AAGXH,QAAAA,KAAK,EAAEA;AAHI,OAAb;AAKAR,MAAAA,KAAK,CACFa,IADH,CACQ,0DADR,EACoED,IADpE,EAEGE,IAFH,CAESC,QAAD,IAAc;AAClBR,QAAAA,QAAQ,CAACS,QAAQ,CAACD,QAAQ,CAACH,IAAV,CAAT,CAAR;AACD,OAJH,EAKGK,KALH,CAKUC,GAAD,IAAS;AACdC,QAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACD,OAPH;AAQD,KArBD;AAsBD,GAvBD;AAwBD,CAzBM;AA2BP,OAAO,MAAMF,QAAQ,GAAIb,IAAD,IAAU;AAChC,SAAO;AACLC,IAAAA,IAAI,EAAEL,KAAK,CAACsB,QADP;AAELlB,IAAAA;AAFK,GAAP;AAID,CALM;AAOP,OAAO,MAAMmB,KAAK,GAAIV,IAAD,IAAU;AAC7B,SAAQL,QAAD,IAAc;AACnB,WAAOP,KAAK,CACTuB,GADI,CACA,0DADA,EAEJT,IAFI,CAEEC,QAAD,IAAc;AAClB,WAAK,MAAMZ,IAAX,IAAmBY,QAAQ,CAACH,IAA5B,EAAkC;AAChC,YAAIA,IAAI,CAACF,QAAL,KAAkBP,IAAI,CAACO,QAA3B,EAAqC;AACjCS,UAAAA,OAAO,CAACC,GAAR,CAAYjB,IAAZ,EADiC,CAEnC;AACA;AACA;AACA;AACA;AACA;AACA;AACD;AACF;AACF,KAfI,CAAP;AAgBD,GAjBD;AAkBD,CAnBM","sourcesContent":["import * as types from \"../constants/ActionTypes\";\r\nimport axios from \"axios\";\r\nimport * as jwt from \"jsonwebtoken\";\r\n//import bcrypt from \"bcrypt\";\r\n\r\nexport const setCurrentUser = (user) => {\r\n  return {\r\n    type: types.SET_CURRENT_USER,\r\n    user,\r\n  };\r\n};\r\n\r\nexport const registerRequest = (user) => {\r\n  return (dispatch) => {\r\n    return () => {\r\n      const token = jwt.sign(\r\n        {\r\n          username: user.username,\r\n          password: user.password,\r\n        },\r\n        \"SECRET_TOKEN\"\r\n      );\r\n      const data = {\r\n        username: user.username,\r\n        password: user.password,\r\n        token: token,\r\n      };\r\n      axios\r\n        .post(\"https://60b0f8b91f26610017fff943.mockapi.io/api/v1/users\", data)\r\n        .then((response) => {\r\n          dispatch(register(response.data));\r\n        })\r\n        .catch((err) => {\r\n          console.log(err);\r\n        });\r\n    };\r\n  };\r\n};\r\n\r\nexport const register = (user) => {\r\n  return {\r\n    type: types.REGISTER,\r\n    user,\r\n  };\r\n};\r\n\r\nexport const login = (data) => {\r\n  return (dispatch) => {\r\n    return axios\r\n      .get(\"https://60b0f8b91f26610017fff943.mockapi.io/api/v1/users\")\r\n      .then((response) => {\r\n        for (const user of response.data) {\r\n          if (data.username === user.username) {\r\n              console.log(user);\r\n            // bcrypt.compare(data.password, user.password).then((valid) => {\r\n            //   if (valid) {\r\n            //     const token = response.data.token;\r\n            //     window.localStorage.setItem(\"jwtToken\", token);\r\n            //     dispatch(setCurrentUser(jwt.decode(token)));\r\n            //   }\r\n            // });\r\n          }\r\n        }\r\n      });\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}