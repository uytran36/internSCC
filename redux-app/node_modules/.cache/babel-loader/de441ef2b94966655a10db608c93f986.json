{"ast":null,"code":"import * as types from \"../constants/ActionTypes\";\nimport axios from \"axios\";\nimport * as jwt from \"jsonwebtoken\";\nimport bcrypt from \"bcryptjs\";\nexport const registerRequest = user => {\n  return dispatch => {\n    const salt = bcrypt.genSaltSync(10);\n    const hassPassword = bcrypt.hashSync(user.password, salt);\n    const token = jwt.sign({\n      username: user.username,\n      password: hassPassword\n    }, \"SECRET_TOKEN\");\n    const data = {\n      username: user.username,\n      password: hassPassword,\n      token: token\n    };\n    axios.post(\"https://60b0f8b91f26610017fff943.mockapi.io/api/v1/users\", data).then(response => {\n      dispatch(register(response.data));\n    }).catch(err => {\n      console.log(err);\n    });\n  };\n};\nexport const register = user => {\n  return {\n    type: types.REGISTER,\n    user\n  };\n};\nexport const loginRequest = user => {\n  return dispatch => {\n    axios.get(\"https://60b0f8b91f26610017fff943.mockapi.io/api/v1/users\").then(response => {\n      dispatch(login(response.data));\n\n      for (const userInt of response.data) {\n        if (user.username === userInt.username) {\n          bcrypt.compare(user.password, userInt.password).then(valid => {\n            if (valid) {\n              const token = userInt.token;\n              window.localStorage.setItem(\"jwtToken\", token);\n              let temp = jwt.decode(token);\n              delete temp[\"iat\"];\n              dispatch(setCurrentUser(temp));\n            }\n          });\n        }\n      }\n    });\n  };\n};\nexport const login = user => {\n  return {\n    type: types.LOGIN,\n    user\n  };\n};","map":{"version":3,"sources":["D:/react/redux-app/src/actions/index.js"],"names":["types","axios","jwt","bcrypt","registerRequest","user","dispatch","salt","genSaltSync","hassPassword","hashSync","password","token","sign","username","data","post","then","response","register","catch","err","console","log","type","REGISTER","loginRequest","get","login","userInt","compare","valid","window","localStorage","setItem","temp","decode","setCurrentUser","LOGIN"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,0BAAvB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAO,KAAKC,GAAZ,MAAqB,cAArB;AACA,OAAOC,MAAP,MAAmB,UAAnB;AAIA,OAAO,MAAMC,eAAe,GAAIC,IAAD,IAAU;AACvC,SAAQC,QAAD,IAAc;AACnB,UAAMC,IAAI,GAAGJ,MAAM,CAACK,WAAP,CAAmB,EAAnB,CAAb;AACA,UAAMC,YAAY,GAAGN,MAAM,CAACO,QAAP,CAAgBL,IAAI,CAACM,QAArB,EAA+BJ,IAA/B,CAArB;AACA,UAAMK,KAAK,GAAGV,GAAG,CAACW,IAAJ,CACZ;AACEC,MAAAA,QAAQ,EAAET,IAAI,CAACS,QADjB;AAEEH,MAAAA,QAAQ,EAAEF;AAFZ,KADY,EAKZ,cALY,CAAd;AAOA,UAAMM,IAAI,GAAG;AACXD,MAAAA,QAAQ,EAAET,IAAI,CAACS,QADJ;AAEXH,MAAAA,QAAQ,EAAEF,YAFC;AAGXG,MAAAA,KAAK,EAAEA;AAHI,KAAb;AAMAX,IAAAA,KAAK,CACFe,IADH,CACQ,0DADR,EACoED,IADpE,EAEGE,IAFH,CAESC,QAAD,IAAc;AAClBZ,MAAAA,QAAQ,CAACa,QAAQ,CAACD,QAAQ,CAACH,IAAV,CAAT,CAAR;AACD,KAJH,EAKGK,KALH,CAKUC,GAAD,IAAS;AACdC,MAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACD,KAPH;AAQD,GAxBD;AAyBD,CA1BM;AA4BP,OAAO,MAAMF,QAAQ,GAAId,IAAD,IAAU;AAChC,SAAO;AACLmB,IAAAA,IAAI,EAAExB,KAAK,CAACyB,QADP;AAELpB,IAAAA;AAFK,GAAP;AAID,CALM;AAOP,OAAO,MAAMqB,YAAY,GAAIrB,IAAD,IAAU;AACpC,SAAQC,QAAD,IAAc;AACnBL,IAAAA,KAAK,CACF0B,GADH,CACO,0DADP,EAEGV,IAFH,CAESC,QAAD,IAAc;AAClBZ,MAAAA,QAAQ,CAACsB,KAAK,CAACV,QAAQ,CAACH,IAAV,CAAN,CAAR;;AACA,WAAK,MAAMc,OAAX,IAAsBX,QAAQ,CAACH,IAA/B,EAAqC;AACnC,YAAIV,IAAI,CAACS,QAAL,KAAkBe,OAAO,CAACf,QAA9B,EAAwC;AACtCX,UAAAA,MAAM,CAAC2B,OAAP,CAAezB,IAAI,CAACM,QAApB,EAA8BkB,OAAO,CAAClB,QAAtC,EAAgDM,IAAhD,CAAsDc,KAAD,IAAW;AAC9D,gBAAIA,KAAJ,EAAW;AACT,oBAAMnB,KAAK,GAAGiB,OAAO,CAACjB,KAAtB;AACAoB,cAAAA,MAAM,CAACC,YAAP,CAAoBC,OAApB,CAA4B,UAA5B,EAAwCtB,KAAxC;AACA,kBAAIuB,IAAI,GAAGjC,GAAG,CAACkC,MAAJ,CAAWxB,KAAX,CAAX;AACA,qBAAOuB,IAAI,CAAC,KAAD,CAAX;AACA7B,cAAAA,QAAQ,CAAC+B,cAAc,CAACF,IAAD,CAAf,CAAR;AACD;AACF,WARD;AASD;AACF;AACF,KAjBH;AAkBD,GAnBD;AAoBD,CArBM;AAsBP,OAAO,MAAMP,KAAK,GAAIvB,IAAD,IAAU;AAC7B,SAAO;AACLmB,IAAAA,IAAI,EAAExB,KAAK,CAACsC,KADP;AAELjC,IAAAA;AAFK,GAAP;AAID,CALM","sourcesContent":["import * as types from \"../constants/ActionTypes\";\r\nimport axios from \"axios\";\r\nimport * as jwt from \"jsonwebtoken\";\r\nimport bcrypt from \"bcryptjs\";\r\n\r\n\r\n\r\nexport const registerRequest = (user) => {\r\n  return (dispatch) => {\r\n    const salt = bcrypt.genSaltSync(10);\r\n    const hassPassword = bcrypt.hashSync(user.password, salt);\r\n    const token = jwt.sign(\r\n      {\r\n        username: user.username,\r\n        password: hassPassword,\r\n      },\r\n      \"SECRET_TOKEN\"\r\n    );\r\n    const data = {\r\n      username: user.username,\r\n      password: hassPassword,\r\n      token: token,\r\n    };\r\n\r\n    axios\r\n      .post(\"https://60b0f8b91f26610017fff943.mockapi.io/api/v1/users\", data)\r\n      .then((response) => {\r\n        dispatch(register(response.data));\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n      });\r\n  };\r\n};\r\n\r\nexport const register = (user) => {\r\n  return {\r\n    type: types.REGISTER,\r\n    user,\r\n  };\r\n};\r\n\r\nexport const loginRequest = (user) => {\r\n  return (dispatch) => {\r\n    axios\r\n      .get(\"https://60b0f8b91f26610017fff943.mockapi.io/api/v1/users\")\r\n      .then((response) => {\r\n        dispatch(login(response.data))\r\n        for (const userInt of response.data) {\r\n          if (user.username === userInt.username) {\r\n            bcrypt.compare(user.password, userInt.password).then((valid) => {\r\n              if (valid) {\r\n                const token = userInt.token;\r\n                window.localStorage.setItem(\"jwtToken\", token);\r\n                let temp = jwt.decode(token);\r\n                delete temp[\"iat\"];\r\n                dispatch(setCurrentUser(temp));\r\n              }\r\n            });\r\n          }\r\n        }\r\n      });\r\n  };\r\n};\r\nexport const login = (user) => {\r\n  return {\r\n    type: types.LOGIN,\r\n    user\r\n  }\r\n};\r\n"]},"metadata":{},"sourceType":"module"}