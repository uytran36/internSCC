{"ast":null,"code":"var _jsxFileName = \"D:\\\\react\\\\todo-list-route\\\\src\\\\components\\\\TodoNew.js\",\n    _s = $RefreshSig$();\n\nimport { React, useState } from \"react\";\nimport \"./TodoOld.css\";\nimport axios from \"axios\";\nimport { Table, Tag, Space, Button, Input } from \"antd\";\nimport { EditTwoTone, DeleteTwoTone } from \"@ant-design/icons\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst {\n  Search\n} = Input;\n\nconst onSearch = value => console.log(value);\n\nfunction TodoNew() {\n  _s();\n\n  const [todoItems, setTodo] = useState([]);\n\n  const firstLoad = () => {\n    axios.get(\"https://60b0f8b91f26610017fff943.mockapi.io/api/v1/todo_data\").then(res => {\n      setTodo(res.data);\n    }).catch(err => {\n      console.log(err);\n    });\n  };\n\n  const columns = [{\n    title: \"id\",\n    dataIndex: \"id\",\n    key: \"id\"\n  }, {\n    title: \"Title\",\n    dataIndex: \"title\",\n    key: \"title\"\n  }, {\n    title: \"Is editing?\",\n    dataIndex: \"isEditing\",\n    key: \"isEditing\",\n    render: isEditing => {\n      let color;\n\n      if (isEditing === false) {\n        color = \"volcano\";\n      }\n\n      if (isEditing === true) {\n        color = \"green\";\n      }\n\n      return /*#__PURE__*/_jsxDEV(Tag, {\n        color: color,\n        children: isEditing.toUpperCase()\n      }, isEditing, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 11\n      }, this);\n    }\n  }, {\n    title: \"Is complete?\",\n    dataIndex: \"isComplete\",\n    key: \"isComplete\",\n    render: isComplete => {\n      let color;\n\n      if (isComplete === false) {\n        color = \"volcano\";\n      }\n\n      if (isComplete === true) {\n        color = \"green\";\n      }\n\n      return /*#__PURE__*/_jsxDEV(Tag, {\n        color: color,\n        children: isComplete.toUpperCase()\n      }, isComplete, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 11\n      }, this);\n    }\n  }, {\n    title: \"Action\",\n    key: \"action\",\n    render: (text, record) => /*#__PURE__*/_jsxDEV(Space, {\n      size: \"middle\",\n      children: [/*#__PURE__*/_jsxDEV(EditTwoTone, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(DeleteTwoTone, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 9\n    }, this)\n  }];\n  firstLoad();\n  const data = todoItems;\n  console.log(todoItems);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"TodoNew\",\n    children: [/*#__PURE__*/_jsxDEV(Search, {\n      placeholder: \"input search text\",\n      allowClear: true,\n      enterButton: \"Search\",\n      size: \"large\",\n      onSearch: onSearch\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      type: \"primary\",\n      size: \"large\",\n      children: \"+Add\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Table, {\n      columns: columns,\n      dataSource: data\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 87,\n    columnNumber: 5\n  }, this);\n}\n\n_s(TodoNew, \"IATjkqwnOHPgZfuwFyM2SmSFDLE=\");\n\n_c = TodoNew;\nexport default TodoNew;\n\nvar _c;\n\n$RefreshReg$(_c, \"TodoNew\");","map":{"version":3,"sources":["D:/react/todo-list-route/src/components/TodoNew.js"],"names":["React","useState","axios","Table","Tag","Space","Button","Input","EditTwoTone","DeleteTwoTone","Search","onSearch","value","console","log","TodoNew","todoItems","setTodo","firstLoad","get","then","res","data","catch","err","columns","title","dataIndex","key","render","isEditing","color","toUpperCase","isComplete","text","record"],"mappings":"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","sourcesContent":["import { React, useState } from \"react\";\r\nimport \"./TodoOld.css\";\r\nimport axios from \"axios\";\r\nimport { Table, Tag, Space, Button, Input } from \"antd\";\r\nimport { EditTwoTone, DeleteTwoTone } from \"@ant-design/icons\";\r\nconst { Search } = Input;\r\nconst onSearch = (value) => console.log(value);\r\n\r\nfunction TodoNew() {\r\n  const [todoItems, setTodo] = useState([]);\r\n  const firstLoad = () => {\r\n    axios\r\n      .get(\"https://60b0f8b91f26610017fff943.mockapi.io/api/v1/todo_data\")\r\n      .then((res) => {\r\n        setTodo(res.data);\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n      });\r\n  };\r\n\r\n  const columns = [\r\n    {\r\n      title: \"id\",\r\n      dataIndex: \"id\",\r\n      key: \"id\",\r\n    },\r\n    {\r\n      title: \"Title\",\r\n      dataIndex: \"title\",\r\n      key: \"title\",\r\n    },\r\n    {\r\n      title: \"Is editing?\",\r\n      dataIndex: \"isEditing\",\r\n      key: \"isEditing\",\r\n      render: (isEditing) => {\r\n        let color;\r\n        if (isEditing === false) {\r\n          color = \"volcano\";\r\n        }\r\n        if (isEditing === true) {\r\n          color = \"green\";\r\n        }\r\n        return (\r\n          <Tag color={color} key={isEditing}>\r\n            {isEditing.toUpperCase()}\r\n          </Tag>\r\n        );\r\n      },\r\n    },\r\n    {\r\n      title: \"Is complete?\",\r\n      dataIndex: \"isComplete\",\r\n      key: \"isComplete\",\r\n      render: (isComplete) => {\r\n        let color;\r\n        if (isComplete === false) {\r\n          color = \"volcano\";\r\n        }\r\n        if (isComplete === true) {\r\n          color = \"green\";\r\n        }\r\n        return (\r\n          <Tag color={color} key={isComplete}>\r\n            {isComplete.toUpperCase()}\r\n          </Tag>\r\n        );\r\n      },\r\n    },\r\n    {\r\n      title: \"Action\",\r\n      key: \"action\",\r\n      render: (text, record) => (\r\n        <Space size=\"middle\">\r\n          <EditTwoTone />\r\n          <DeleteTwoTone />\r\n        </Space>\r\n      ),\r\n    },\r\n  ];\r\n\r\n  firstLoad();\r\n  const data = todoItems;\r\n  console.log(todoItems);\r\n  return (\r\n    <div className=\"TodoNew\">\r\n      <Search\r\n        placeholder=\"input search text\"\r\n        allowClear\r\n        enterButton=\"Search\"\r\n        size=\"large\"\r\n        onSearch={onSearch}\r\n      />\r\n      <Button type=\"primary\" size=\"large\">\r\n        +Add\r\n      </Button>\r\n      <Table columns={columns} dataSource={data} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default TodoNew;\r\n"]},"metadata":{},"sourceType":"module"}