{"ast":null,"code":"var _jsxFileName = \"D:\\\\react\\\\todo-list-route\\\\src\\\\components\\\\TodoNew.js\",\n    _s = $RefreshSig$();\n\nimport { React, useEffect, useState } from \"react\";\nimport \"./TodoNew.css\";\nimport axios from \"axios\";\nimport { Table, Tag, Space, Button, Input } from \"antd\";\nimport { EditTwoTone, DeleteTwoTone } from \"@ant-design/icons\";\nimport EditModal from \"./EditModal\";\nimport AddModal from \"./AddModal\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst {\n  Search\n} = Input;\n\nconst onSearch = value => console.log(value);\n\nfunction TodoNew() {\n  _s();\n\n  const [todoItems, setTodo] = useState([]);\n  const [editVisible, setEditVisible] = useState(false);\n  const [addVisible, setAddVisible] = useState(false);\n  const [todoItem, setItem] = useState({});\n  useEffect(() => {\n    axios.get(\"https://60b0f8b91f26610017fff943.mockapi.io/api/v1/todo_data\").then(res => {\n      setTodo(res.data);\n    }).catch(err => {\n      console.log(err);\n    });\n  }, []); //click edit\n\n  const onClickEdit = item => {\n    setItem(item);\n    setEditVisible(true);\n  };\n\n  const onClickAdd = () => {\n    setAddVisible(true);\n  }; //click delete\n\n\n  const onClickDelete = item => {\n    const temp = todoItems;\n    const index = this.findIndex(temp, item);\n    setTodo({\n      todoItems: [...todoItems.slice(0, index), ...todoItems.slice(index + 1)]\n    });\n    axios.delete(\"https://60b0f8b91f26610017fff943.mockapi.io/api/v1/todo_data/\" + item.id).then(response => {\n      console.log(response);\n    });\n  }; //define table\n\n\n  const columns = [{\n    title: \"id\",\n    dataIndex: \"id\",\n    key: \"id\"\n  }, {\n    title: \"Title\",\n    dataIndex: \"title\",\n    key: \"title\"\n  }, {\n    title: \"Is editing?\",\n    dataIndex: \"isEditing\",\n    key: \"isEditing\",\n    render: isEditing => {\n      let color;\n\n      if (isEditing === false) {\n        color = \"volcano\";\n      }\n\n      if (isEditing === true) {\n        color = \"green\";\n      }\n\n      return /*#__PURE__*/_jsxDEV(Tag, {\n        color: color,\n        children: isEditing.toString().toUpperCase()\n      }, isEditing, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 11\n      }, this);\n    }\n  }, {\n    title: \"Is complete?\",\n    dataIndex: \"isCompleted\",\n    key: \"isCompleted\",\n    render: isCompleted => {\n      let color;\n\n      if (isCompleted === false) {\n        color = \"volcano\";\n      }\n\n      if (isCompleted === true) {\n        color = \"green\";\n      }\n\n      return /*#__PURE__*/_jsxDEV(Tag, {\n        color: color,\n        children: isCompleted.toString().toUpperCase()\n      }, isCompleted, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 11\n      }, this);\n    }\n  }, {\n    title: \"Action\",\n    key: \"action\",\n    render: (text, record) => /*#__PURE__*/_jsxDEV(Space, {\n      size: \"middle\",\n      children: [/*#__PURE__*/_jsxDEV(EditTwoTone, {\n        className: \"edit\",\n        onClick: () => onClickEdit(record)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(DeleteTwoTone, {\n        className: \"delete\",\n        onClick: () => onClickDelete(record)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 9\n    }, this)\n  }]; //define data for table\n\n  const data = todoItems;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"TodoNew\",\n    children: [/*#__PURE__*/_jsxDEV(Search, {\n      placeholder: \"input search text\",\n      allowClear: true,\n      enterButton: \"Search\",\n      size: \"large\",\n      onSearch: onSearch\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      type: \"primary\",\n      size: \"large\",\n      onClick: onClickAdd,\n      children: \"+Add\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Table, {\n      columns: columns,\n      dataSource: data\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(EditModal, {\n      visible: editVisible,\n      todoItem: todoItem\n    }, editVisible, false, {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(AddModal, {\n      visible: addVisible\n    }, addVisible, false, {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 124,\n    columnNumber: 5\n  }, this);\n}\n\n_s(TodoNew, \"HuN7VKd56RVKyTUwpX8pNYXWcRY=\");\n\n_c = TodoNew;\nexport default TodoNew;\n\nvar _c;\n\n$RefreshReg$(_c, \"TodoNew\");","map":{"version":3,"sources":["D:/react/todo-list-route/src/components/TodoNew.js"],"names":["React","useEffect","useState","axios","Table","Tag","Space","Button","Input","EditTwoTone","DeleteTwoTone","EditModal","AddModal","Search","onSearch","value","console","log","TodoNew","todoItems","setTodo","editVisible","setEditVisible","addVisible","setAddVisible","todoItem","setItem","get","then","res","data","catch","err","onClickEdit","item","onClickAdd","onClickDelete","temp","index","findIndex","slice","delete","id","response","columns","title","dataIndex","key","render","isEditing","color","toString","toUpperCase","isCompleted","text","record"],"mappings":"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","sourcesContent":["import { React, useEffect, useState } from \"react\";\r\nimport \"./TodoNew.css\";\r\nimport axios from \"axios\";\r\nimport { Table, Tag, Space, Button, Input } from \"antd\";\r\nimport { EditTwoTone, DeleteTwoTone } from \"@ant-design/icons\";\r\nimport EditModal from \"./EditModal\";\r\nimport AddModal from \"./AddModal\";\r\nconst { Search } = Input;\r\nconst onSearch = (value) => console.log(value);\r\n\r\nfunction TodoNew() {\r\n  const [todoItems, setTodo] = useState([]);\r\n  const [editVisible, setEditVisible] = useState(false);\r\n  const [addVisible, setAddVisible] = useState(false);\r\n  const [todoItem, setItem] = useState({});\r\n\r\n  useEffect(() => {\r\n    axios\r\n      .get(\"https://60b0f8b91f26610017fff943.mockapi.io/api/v1/todo_data\")\r\n      .then((res) => {\r\n        setTodo(res.data);\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n      });\r\n  }, []);\r\n\r\n  //click edit\r\n  const onClickEdit = (item) => {\r\n    setItem(item);\r\n    setEditVisible(true);\r\n    \r\n  };\r\n\r\n  const onClickAdd = () => {\r\n    setAddVisible(true);\r\n  }\r\n\r\n  //click delete\r\n  const onClickDelete = (item) => {\r\n    const temp = todoItems;\r\n\r\n    const index = this.findIndex(temp, item);\r\n    setTodo({\r\n      todoItems: [...todoItems.slice(0, index), ...todoItems.slice(index + 1)],\r\n    });\r\n\r\n    axios\r\n      .delete(\r\n        \"https://60b0f8b91f26610017fff943.mockapi.io/api/v1/todo_data/\" +\r\n          item.id\r\n      )\r\n      .then((response) => {\r\n        console.log(response);\r\n      });\r\n  };\r\n\r\n  //define table\r\n  const columns = [\r\n    {\r\n      title: \"id\",\r\n      dataIndex: \"id\",\r\n      key: \"id\",\r\n    },\r\n    {\r\n      title: \"Title\",\r\n      dataIndex: \"title\",\r\n      key: \"title\",\r\n    },\r\n    {\r\n      title: \"Is editing?\",\r\n      dataIndex: \"isEditing\",\r\n      key: \"isEditing\",\r\n      render: (isEditing) => {\r\n        let color;\r\n        if (isEditing === false) {\r\n          color = \"volcano\";\r\n        }\r\n        if (isEditing === true) {\r\n          color = \"green\";\r\n        }\r\n        return (\r\n          <Tag color={color} key={isEditing}>\r\n            {isEditing.toString().toUpperCase()}\r\n          </Tag>\r\n        );\r\n      },\r\n    },\r\n    {\r\n      title: \"Is complete?\",\r\n      dataIndex: \"isCompleted\",\r\n      key: \"isCompleted\",\r\n      render: (isCompleted) => {\r\n        let color;\r\n        if (isCompleted === false) {\r\n          color = \"volcano\";\r\n        }\r\n        if (isCompleted === true) {\r\n          color = \"green\";\r\n        }\r\n        return (\r\n          <Tag color={color} key={isCompleted}>\r\n            {isCompleted.toString().toUpperCase()}\r\n          </Tag>\r\n        );\r\n      },\r\n    },\r\n    {\r\n      title: \"Action\",\r\n      key: \"action\",\r\n      render: (text, record) => (\r\n        <Space size=\"middle\">\r\n          <EditTwoTone className=\"edit\" onClick={() => onClickEdit(record)}/>\r\n          <DeleteTwoTone className=\"delete\" onClick={() => onClickDelete(record)} />\r\n        </Space>\r\n      ),\r\n    },\r\n  ];\r\n\r\n  //define data for table\r\n  const data = todoItems;\r\n  \r\n  return (\r\n    <div className=\"TodoNew\">\r\n      <Search\r\n        placeholder=\"input search text\"\r\n        allowClear\r\n        enterButton=\"Search\"\r\n        size=\"large\"\r\n        onSearch={onSearch}\r\n      />\r\n      <Button type=\"primary\" size=\"large\" onClick={onClickAdd}>\r\n        +Add\r\n      </Button>\r\n      <Table columns={columns} dataSource={data} />\r\n      <EditModal key={editVisible} visible={editVisible} todoItem={todoItem}/>\r\n      <AddModal key={addVisible} visible={addVisible}/>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default TodoNew;\r\n"]},"metadata":{},"sourceType":"module"}